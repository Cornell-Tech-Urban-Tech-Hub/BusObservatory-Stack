# Query: (FIXME)|(TODO)
# Flags: RegExp
# ContextLines: 1

14 results - 6 files

bus_observatory_stack/bus_observatory_stack.py:
  13  
  14: #FIXME: add termination protection when time to deploy to production
  15  class BusObservatoryStack(Stack):

  25  
  26:         #FIXME: hardcoded region
  27          aws_region = "us-east-1"

  35          # # LOAD + UPLOAD CONFIG
  36:         # #FIXME: this can be removed since we're using parameter store, and anything that needs it will grab the config from there
  37          # ###########################################################

bus_observatory_stack/my_constructs/API.py:
  46              "BusObservatoryAPI_HostedZone",
  47:             domain_name="busobservatory.org" #FIXME: how to pass this in? ENV var?
  48              )

bus_observatory_stack/my_constructs/Lake.py:
   39                      's3:PutObject',
   40:                     'lakeformation:*' #FIXME: this doesnt seem to help
   41                      ], 

  103  
  104:         # # FIXME: this doesnt deploy â€” appears blocked by AWS Organizations (AT has a ticket out as of 2023-02-10)
  105          # location_permission = lakeformation.CfnPermissions(

  119  
  120:         # FIXME: verify tables are governed / compaction is active
  121          # check compaction status

  123          # need to add to crawler settings? "TableType":"GOVERNED",
  124:         # FIXME: how to set the compaction schedule?

bus_observatory_stack/my_lambdas/lambda_Grabber/app.py:
  11  
  12: #TODO: write code to fetch feed config from SSM (and copy to lambda API, and remove from stack)
  13  

bus_observatory_stack/my_lambdas/lambda_Grabber/parsers/CleverDevicesXML.py:
  11      # argument is a Feed object
  12:     #todo: something with feed
  13      

  59  
  60: # #FIXME: record in UTC time
  61  # # record as UTC local time

bus_observatory_stack/my_lambdas/lambda_Grabber/parsers/SIRI.py:
  32          
  33:     #TODO: write / refactor below for a general/non-NYC SIRI feed parser
  34      else:

  77              route = route_id.split('_')[1]
  78:             #FIXME: trap this more elegantly
  79              try:

  91  
  92:     # #FIXME: record as UTC local time
  93      # # 1 convert POSIX timestamp to datetime
